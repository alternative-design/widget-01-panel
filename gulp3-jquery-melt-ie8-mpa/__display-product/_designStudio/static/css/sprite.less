/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@aini-name: 'aini';
@aini-x: 0px;
@aini-y: 2px;
@aini-offset-x: 0px;
@aini-offset-y: -2px;
@aini-width: 22px;
@aini-height: 22px;
@aini-total-width: 477px;
@aini-total-height: 24px;
@aini-image: '_sprite.png';
@aini: 0px 2px 0px -2px 22px 22px 477px 24px '_sprite.png' 'aini';
@baibai-name: 'baibai';
@baibai-x: 22px;
@baibai-y: 2px;
@baibai-offset-x: -22px;
@baibai-offset-y: -2px;
@baibai-width: 22px;
@baibai-height: 22px;
@baibai-total-width: 477px;
@baibai-total-height: 24px;
@baibai-image: '_sprite.png';
@baibai: 22px 2px -22px -2px 22px 22px 477px 24px '_sprite.png' 'baibai';
@divider-name: 'divider';
@divider-x: 0px;
@divider-y: 0px;
@divider-offset-x: 0px;
@divider-offset-y: 0px;
@divider-width: 477px;
@divider-height: 2px;
@divider-total-width: 477px;
@divider-total-height: 24px;
@divider-image: '_sprite.png';
@divider: 0px 0px 0px 0px 477px 2px 477px 24px '_sprite.png' 'divider';
@spritesheet-width: 477px;
@spritesheet-height: 24px;
@spritesheet-image: '_sprite.png';
@spritesheet-sprites: @aini @baibai @divider;
@spritesheet: 477px 24px '_sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
